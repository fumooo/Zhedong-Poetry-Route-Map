{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { BmlCurveLine } from 'vue-baidu-map';\nimport clickwindow from \"./Popup_window/ClickWindow.vue\";\nimport { mapState } from 'vuex';\nexport default {\n  components: {\n    BmlCurveLine,\n    window,\n    clickwindow\n  },\n  name: \"baidu\",\n  updated: function () {\n    // console.log(this.positions.length)\n    //  console.log(this.$store.state.poemList.length)\n    //  console.log(this.positions.length)\n    //  console.log(\"-------\")\n  },\n  mounted: function () {\n    //用于初始化坐标点\n    this.point.push(require('../assets/point/marker.azure.png'));\n    this.point.push(require('../assets/point/marker.green.png'));\n    this.point.push(require('../assets/point/marker.red.png'));\n    this.point.push(require('../assets/point/marker.azure1.png'));\n  },\n  data() {\n    return {\n      style: {\n        border: '1px solid rgb(187, 187, 187)',\n        font: '12px arial'\n      },\n      center: {\n        lng: 0,\n        lat: 0\n      },\n      zoom: 8,\n      positionList: [],\n      //用来存储城市信息\n      point: [],\n      //用来存储需要使用的覆盖物点的图片路径\n      lineList: [],\n      //用来存储曲线的经纬度\n      lineColor: ['pink', 'purple', 'red', 'grey'],\n      //用来存储曲线的颜色\n      PeopleCityInformation: [] //用来存储诗人城市信息\n    };\n  },\n\n  methods: {\n    // 舒适化地图\n    handler({\n      BMap,\n      map\n    }) {\n      console.log(BMap, map);\n      // // 经度\n      // this.center.lng = 116.404\n      // // 维度\n      // this.center.lat = 39.915\n      this.center = \"台州\";\n      // 地图放大等级\n\n      // 个性化样式\n      map.setMapStyleV2({\n        styleId: \"2896c69336cf847cc5ab917cd1e19d44\"\n      });\n      map.enableScrollWheelZoom(true);\n      // map.setMapType(BMAP_HYBRID_MAP);\n    },\n\n    // 设置关闭窗口\n    infoWindowClose(index, indexx) {\n      this.positionList[index][indexx].showFlag = false;\n    },\n    // 设置打开窗口\n    infoWindowOpen(index, indexx) {\n      // console.log(index)   \n      // console.log(indexx)  \n      //设置这个窗体不刷新 这个坑是vue-baidu-map里面的 \n      setTimeout(() => {\n        this.$nextTick(() => {\n          this.$refs.infoWindow[(index + 1) * (indexx + 1) - 1].observer.disconnect();\n          // this.$refs.infoWindow[(index+1)*(indexx+1)].observer.disconnect();\n        });\n      }, 500);\n      this.positionList[index][indexx].showFlag = true;\n      console.log(this.positionList[index][indexx].cname, this.$store.state.peopleName[index]);\n      this.$http.get(\"queryInformation\", {\n        params: {\n          cname: this.positionList[index][indexx].cname,\n          pname: this.$store.state.peopleName[index]\n        }\n      }).then(response => {\n        this.PeopleCityInformation = response.data;\n      }).catch(function (error) {\n        console.log(error);\n      });\n      // this.PeopleCityInformation = this.PeopleCityInformation.replace(\"\\\\n\", \"\\n\");\n    }\n  },\n\n  computed: {\n    poemList() {\n      return this.$store.state.poemList;\n    }\n  },\n  watch: {\n    poemList(newVal, oldVal) {\n      // console.log(typeof(newVal[0]))\n      // console.log(\"长度\"+newVal.length)\n      if (newVal.length == 0) {\n        this.positionList = [];\n        this.lineList = [];\n        return;\n      }\n      if (newVal.length > 0) {\n        this.positionList = [];\n        this.lineList = [];\n\n        //axios查询覆盖物点 且按照顺序\n        let position = [];\n        for (let i of newVal) {\n          position.push(new Promise((resolve, reject) => {\n            this.$http.get(`queryByPeopleId/?id=${i}`).then(response => {\n              resolve(response);\n            }), error => {\n              reject(error);\n            };\n          }));\n        }\n        Promise.all(position).then(res => {\n          for (let i of res) {\n            // console.log(i.data)\n            for (let m = 0; m < i.data.length; m++) {\n              i.data[m].showFlag = false;\n            }\n            this.positionList.push(i.data);\n          }\n        });\n\n        //axios查询覆盖物曲线 且按照顺序\n        let line = [];\n        for (let i of newVal) {\n          line.push(new Promise((resolve, reject) => {\n            this.$http.get(`queryLineByPeopleId/?id=${i}`).then(response => {\n              resolve(response);\n            }), error => {\n              reject(error);\n            };\n          }));\n        }\n        Promise.all(line).then(res => {\n          for (let i of res) {\n            this.lineList.push(i.data);\n          }\n        });\n\n        // for(let i = 0; i < newVal.length; i++){\n        //   //axios查询覆盖物点\n        //   this.$http.get(\"queryByPeopleId\",{\n        //       params: {\n        //       id: newVal[i]\n        //     }\n        //   })\n        //   .then((response)=>{ \n        //     // console.log(response.data.length)\n        //     //先给每一个对象加一条showFlag属性 用于去判断点覆盖物上面的弹窗\n        //       for(let i = 0 ; i < response.data.length ; i++){\n        //         response.data[i].showFlag = false\n        //       }\n        //       this.positions.push(response.data)//通过键值对形式去存储数据\n        //   }) \n        //   .catch(function (error) {\n        //     console.log(error);\n        //   }) \n\n        //   //axios查询覆盖物曲线\n        //   this.$http.get(\"queryLineByPeopleId\",{\n        //       params: {\n        //       id: newVal[i]\n        //     }\n        //   })\n        //   .then((response)=>{ \n        //       this.lineList.push(response.data)//通过键值对形式去存储数据\n        //       // console.log(response.data)\n        //       // console.log(typeof(response.data))\n        //   }) \n        //   .catch(function (error) {\n        //     console.log(error);\n        //   }) \n        //   // console.log(this.lineList)\n        // } \n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAkCA;AACA;AACA;AACA;EACAA;IAAAC;IAAAC;IAAAC;EAAA;EACAC;EAEAC;IACA;IACA;IACA;IACA;EAAA,CACA;EAEAC;IACA;IACA;IACA;IACA;IACA;EAEA;EAEAC;IACA;MACAC;QAAAC;QAAAC;MAAA;MACAC;QAAAC;QAAAC;MAAA;MACAC;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;IACA;EACA;;EACAC;IACA;IACAC;MAAAC;MAAAC;IAAA;MACAC;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACAD;QACAE;MACA;MACAF;MACA;IACA;;IACA;IACAG;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;MACAC;QACA;UACA;UACA;QACA;MACA;MACA;MACAJ;MACA;QACAK;UACAC;UACAC;QACA;MACA;QACA;MACA;QACAP;MACA;MACA;IACA;EACA;;EACAQ;IACAC;MACA;IACA;EAEA;EACAC;IACAD;MACA;MACA;MACA;QACA;QACA;QACA;MACA;MACA;QACA;QACA;;QAEA;QACA;QACA;UACAE,cACA;YACA,eACA,2BACA;cACAC;YACA;cACAC;YACA;UACA,GACA;QACA;QACAC;UACA;YACA;YACA;cACAC;YACA;YACA;UACA;QACA;;QAEA;QACA;QACA;UACAC,UACA;YACA,eACA,+BACA;cACAJ;YACA;cACAC;YACA;UACA,GACA;QACA;QACAC;UACA;YACA;UACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;IACA;EACA;AACA","names":["components","BmlCurveLine","window","clickwindow","name","updated","mounted","data","style","border","font","center","lng","lat","zoom","positionList","point","lineList","lineColor","PeopleCityInformation","methods","handler","BMap","map","console","styleId","infoWindowClose","infoWindowOpen","setTimeout","params","cname","pname","computed","poemList","watch","position","resolve","reject","Promise","i","line"],"sourceRoot":"src/components","sources":["BaiduMap.vue"],"sourcesContent":["<template>\n  <div>\n    <baidu-map :center=\"center\" :zoom=\"zoom\" @ready=\"handler\" class=\"baidu\" MapType=\"BMAP_HYBRID_MAP\">\n      <bm-navigation anchor=\"BMAP_ANCHOR_TOP_LEFT\"></bm-navigation>\n      <bm-overview-map anchor=\"BMAP_ANCHOR_BOTTOM_RIGHT\" :isOpen=\"false\"></bm-overview-map>\n      <bm-map-type :map-types=\"['BMAP_NORMAL_MAP', 'BMAP_HYBRID_MAP']\" anchor=\"BMAP_ANCHOR_TOP_RIGHT\"></bm-map-type>\n      \n\n      <div v-for='(item,index) in positionList'>\n      <bm-marker v-for='(position,indexx) in item' :icon=\"{url: point[index], size: {width: 32, height: 32}}\" @click=\"infoWindowOpen(index,indexx)\" :key=\"indexx\" :position=\"{lng: position.lng, lat: position.lat}\">\n        <bm-label :content=\"position.cname\" \n        :labelStyle=\"style\" \n        :offset=\"{width: -8, height: 29}\"\n        />\n        <bm-info-window ref=\"infoWindow\" :show=\"position.showFlag\" @close=\"infoWindowClose(index,indexx)\" :autoPan='true' :width=\"500\" :height=\"300\">\n          <clickwindow \n          :cityName=\"positionList[index][indexx].cname\"\n          :peopleName=\"$store.state.peopleName[index]\"\n          :PeopleCityInformation=\"PeopleCityInformation\"\n          ></clickwindow>\n        </bm-info-window>\n      </bm-marker>      \n      </div>\n      \n      <div v-for='(item,index) in lineList' >\n      <bml-curve-line :points=\"item\" :stroke-color=\"lineColor[index]\" :stroke-opacity=\"1\" :stroke-weight=\"2\" ></bml-curve-line>\n      </div>\n      \n      <!-- <bm-polyline :path=\"lineList\" stroke-color=\"blue\" :stroke-opacity=\"1\" :stroke-weight=\"2\" :editing=\"true\" ></bm-polyline> -->\n    </baidu-map>\n  </div>\n</template>\n\n<script>\nimport {BmlCurveLine} from 'vue-baidu-map'\nimport clickwindow from \"./Popup_window/ClickWindow.vue\"\nimport {mapState} from 'vuex'\nexport default {\n  components:{BmlCurveLine,window,clickwindow},\n  name: \"baidu\",\n  \n  updated:function(){\n    // console.log(this.positions.length)\n    //  console.log(this.$store.state.poemList.length)\n    //  console.log(this.positions.length)\n    //  console.log(\"-------\")\n  },\n\n  mounted:function(){\n    //用于初始化坐标点\n    this.point.push(require('../assets/point/marker.azure.png'))\n    this.point.push(require('../assets/point/marker.green.png'))\n    this.point.push(require('../assets/point/marker.red.png'))\n    this.point.push(require('../assets/point/marker.azure1.png'))\n    \n  },\n  \n  data() {\n    return {\n      style:{border:'1px solid rgb(187, 187, 187)', font:'12px arial'},\n      center: { lng: 0, lat: 0 },\n      zoom: 8,\n      positionList:[],//用来存储城市信息\n      point:[],//用来存储需要使用的覆盖物点的图片路径\n      lineList:[], //用来存储曲线的经纬度\n      lineColor:['pink','purple','red','grey'],//用来存储曲线的颜色\n      PeopleCityInformation:[],//用来存储诗人城市信息\n    };\n  },\n  methods: {\n    // 舒适化地图\n    handler({ BMap, map }) {\n      console.log(BMap, map);\n      // // 经度\n      // this.center.lng = 116.404\n      // // 维度\n      // this.center.lat = 39.915\n      this.center = \"台州\";\n      // 地图放大等级\n      \n      // 个性化样式\n      map.setMapStyleV2({\n        styleId: \"2896c69336cf847cc5ab917cd1e19d44\",\n      });\n      map.enableScrollWheelZoom(true);\n      // map.setMapType(BMAP_HYBRID_MAP);\n    },\n    // 设置关闭窗口\n    infoWindowClose(index,indexx){\n      this.positionList[index][indexx].showFlag = false\n    },\n    // 设置打开窗口\n    infoWindowOpen(index,indexx){\n      // console.log(index)   \n      // console.log(indexx)  \n      //设置这个窗体不刷新 这个坑是vue-baidu-map里面的 \n      setTimeout(() => {\n      this.$nextTick(() => {\n      this.$refs.infoWindow[(index+1)*(indexx+1)-1].observer.disconnect();\n      // this.$refs.infoWindow[(index+1)*(indexx+1)].observer.disconnect();\n      })\n    }, 500);\n      this.positionList[index][indexx].showFlag = true\n      console.log(this.positionList[index][indexx].cname,this.$store.state.peopleName[index])\n      this.$http.get(\"queryInformation\",{\n        params:{\n          cname : this.positionList[index][indexx].cname,\n          pname : this.$store.state.peopleName[index]\n        }\n      }).then((response)=>{        \n        this.PeopleCityInformation = response.data\n      }).catch(function(error){\n        console.log(error)\n      })\n      // this.PeopleCityInformation = this.PeopleCityInformation.replace(\"\\\\n\", \"\\n\");\n    }\n  },\n  computed:{\n    poemList(){\n\t\t\treturn this.$store.state.poemList\n\t\t},\n\n  },\n  watch:{\n    poemList(newVal,oldVal){\n      // console.log(typeof(newVal[0]))\n      // console.log(\"长度\"+newVal.length)\n      if(newVal.length == 0){\n        this.positionList = []\n        this.lineList = []\n        return\n      }\n      if(newVal.length > 0){\n        this.positionList = []\n        this.lineList = []\n\n        //axios查询覆盖物点 且按照顺序\n        let position = []\n        for(let i of newVal){\n          position.push(\n            new Promise((resolve,reject)=>{\n              this.$http.get(\n                `queryByPeopleId/?id=${i}`\n              ).then(response=>{\n                resolve(response)\n              }),error=>{\n                reject(error)\n              }\n            })\n          )\n        }\n        Promise.all(position).then(res=>{\n          for(let i of res){\n            // console.log(i.data)\n            for(let m = 0; m < i.data.length; m++){\n              i.data[m].showFlag = false\n            }\n            this.positionList.push(i.data)\n          }\n        })\n\n        //axios查询覆盖物曲线 且按照顺序\n        let line = []\n        for(let i of newVal){\n          line.push(\n            new Promise((resolve,reject)=>{\n              this.$http.get(\n                `queryLineByPeopleId/?id=${i}`\n              ).then(response=>{\n                resolve(response)\n              }),error=>{\n                reject(error)\n              }\n            })\n          )\n        }\n        Promise.all(line).then(res=>{\n          for(let i of res){\n            this.lineList.push(i.data)\n          }\n        })\n\n        // for(let i = 0; i < newVal.length; i++){\n        //   //axios查询覆盖物点\n        //   this.$http.get(\"queryByPeopleId\",{\n        //       params: {\n        //       id: newVal[i]\n        //     }\n        //   })\n        //   .then((response)=>{ \n        //     // console.log(response.data.length)\n        //     //先给每一个对象加一条showFlag属性 用于去判断点覆盖物上面的弹窗\n        //       for(let i = 0 ; i < response.data.length ; i++){\n        //         response.data[i].showFlag = false\n        //       }\n        //       this.positions.push(response.data)//通过键值对形式去存储数据\n        //   }) \n        //   .catch(function (error) {\n        //     console.log(error);\n        //   }) \n\n        //   //axios查询覆盖物曲线\n        //   this.$http.get(\"queryLineByPeopleId\",{\n        //       params: {\n        //       id: newVal[i]\n        //     }\n        //   })\n        //   .then((response)=>{ \n        //       this.lineList.push(response.data)//通过键值对形式去存储数据\n        //       // console.log(response.data)\n        //       // console.log(typeof(response.data))\n        //   }) \n        //   .catch(function (error) {\n        //     console.log(error);\n        //   }) \n        //   // console.log(this.lineList)\n        // } \n      }\n    },\n  }\n};\n</script>\n\n<style scoped>\n.baidu {\n  width: 100%;\n  height: 500px;\n  display: flex;\n}\n.baidu-map {\n  width: 100%;\n  height: 500px;\n  display: flex;\n}\n.bm-info-window{\n  display: flex;\n  overflow: auto;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}