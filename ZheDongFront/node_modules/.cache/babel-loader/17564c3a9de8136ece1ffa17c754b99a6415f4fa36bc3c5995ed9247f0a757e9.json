{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    var validatePass = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(\"请输入新密码\"));\n      } else if (value.toString().length < 6 || value.toString().length > 18) {\n        callback(new Error(\"密码长度为6-18位\"));\n      } else {\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请再次输入密码\"));\n      } else if (value !== this.resetForm.newpwd) {\n        callback(new Error(\"两次输入密码不一致!\"));\n      } else {\n        callback();\n      }\n    };\n    return {\n      resetForm: {\n        //传给后台所需要的参数\n        newpassword1: \"\",\n        password: \"\",\n        username: \"\" //此处只是后台需要的字段而已，如果前期有公用cookie里面有获取并且保存过，现在需要另外调用进来，具体的获取方法就看个人了\n      },\n\n      resetFormRules: {\n        password: [{\n          required: true,\n          message: \"请输入旧密码\",\n          trigger: 'blur'\n        }],\n        newpwd: [{\n          required: true,\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        newpassword1: [{\n          required: true,\n          validator: validatePass2,\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  methods: {\n    toAmend() {\n\n      // this.$refs.resetForm.validate(valid => {\n      //   if (valid) {\n      //   //这里的api.materialQuery.toAmend是调用前期我们统一的api接口url路径，不作参考 ，只要把后台需要的字段正常传进去即可 \n      //     api.materialQuery.toAmend(this.resetForm)\n      //       .then(res => {\n      //         if(res.code === 2){\n      //           this.$message({\n      //               message: res.msg,\n      //               type: \"error\",\n      //               duration: \"2000\"\n      //             });\n      //           return false;\n      //         }\n      //         if (res.code === 0) {\n      //           this.$message.success(\"修改成功,3秒后跳转到登录页！\");\n      //           setTimeout(() => {\n      //              this.logout();//调用跳转到登陆页的方法\n      //           }, 3000);\n      //         }\n      //         ic\n      //       })\n      //       .catch(() => {});\n      //   }\n      // });\n    },\n    //这是修改成功后重新返回登陆页的方法，看个人需要自行调整\n    async logout() {\n      await this.$store.dispatch(\"user/logout\");\n      this.$router.push(`/login`);\n    }\n  }\n};","map":{"version":3,"mappings":";AA0BA;EACAA;IACA;MACA;QACAC;MACA;QACAA;MACA;QACAA;MACA;IACA;IACA;MACA;QACAA;MACA;QACAA;MACA;QACAA;MACA;IACA;IACA;MACAC;QACA;QACAC;QACAC;QACAC;MACA;;MACAC;QACAF,WACA;UAAAG;UAAAC;UAAAC;QAAA,EACA;QACAC,SACA;UAAAH;UAAAI;UAAAF;QAAA,EACA;QACAN,eACA;UAAAI;UAAAI;UAAAF;QAAA;MAEA;IACA;EACA;EACAG;IACAC;;MAGA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACA;IACA;IACA;MACA;MACA;IACA;EACA;AACA","names":["data","callback","resetForm","newpassword1","password","username","resetFormRules","required","message","trigger","newpwd","validator","methods","toAmend"],"sourceRoot":"src/view/back/Login","sources":["Password.vue"],"sourcesContent":["<template>\n    <div class=\"app-container common-list-page\">\n      <el-form\n        :model=\"resetForm\"\n        :rules=\"resetFormRules\"\n        ref=\"resetForm\"\n        status-icon\n        label-width=\"100px\"\n      >\n        <el-form-item label=\"旧密码：\" prop=\"password\">\n          <el-input type=\"password\" v-model=\"resetForm.password\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"新密码：\" prop=\"newpwd\">\n          <el-input type=\"password\" v-model=\"resetForm.newpwd\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"确认密码：\" prop=\"newpassword1\">\n          <el-input type=\"password\" v-model=\"resetForm.newpassword1\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click.native.prevent=\"toAmend\">确认修改</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      var validatePass = (rule, value, callback) => {\n        if (!value) {\n          callback(new Error(\"请输入新密码\"));\n        } else if (value.toString().length < 6 || value.toString().length > 18) {\n          callback(new Error(\"密码长度为6-18位\"));\n        } else {\n          callback();\n        }\n      };\n      var validatePass2 = (rule, value, callback) => {\n        if (value === \"\") {\n          callback(new Error(\"请再次输入密码\"));\n        } else if (value !== this.resetForm.newpwd) {\n          callback(new Error(\"两次输入密码不一致!\"));\n        } else {\n          callback();\n        }\n      };\n      return {\n        resetForm: {\n        //传给后台所需要的参数\n          newpassword1: \"\",\n          password: \"\",\n          username: \"\"//此处只是后台需要的字段而已，如果前期有公用cookie里面有获取并且保存过，现在需要另外调用进来，具体的获取方法就看个人了\n        },\n        resetFormRules: {\n           password: [\n              { required: true, message: \"请输入旧密码\", trigger: 'blur' }\n          ],  \n          newpwd: [\n              { required: true, validator: validatePass, trigger: 'blur' }\n          ],\n          newpassword1: [\n            { required: true, validator: validatePass2, trigger: \"blur\" }\n          ]\n        }\n      };\n    },\n    methods: {\n      toAmend() {\n        \n\n        // this.$refs.resetForm.validate(valid => {\n        //   if (valid) {\n        //   //这里的api.materialQuery.toAmend是调用前期我们统一的api接口url路径，不作参考 ，只要把后台需要的字段正常传进去即可 \n        //     api.materialQuery.toAmend(this.resetForm)\n        //       .then(res => {\n        //         if(res.code === 2){\n        //           this.$message({\n        //               message: res.msg,\n        //               type: \"error\",\n        //               duration: \"2000\"\n        //             });\n        //           return false;\n        //         }\n        //         if (res.code === 0) {\n        //           this.$message.success(\"修改成功,3秒后跳转到登录页！\");\n        //           setTimeout(() => {\n        //              this.logout();//调用跳转到登陆页的方法\n        //           }, 3000);\n        //         }\n        //         ic\n        //       })\n        //       .catch(() => {});\n        //   }\n        // });\n      },\n      //这是修改成功后重新返回登陆页的方法，看个人需要自行调整\n      async logout() {\n        await this.$store.dispatch(\"user/logout\");\n        this.$router.push(`/login`);\n      }\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .el-form {\n    width: 60%;\n    margin: 50px auto 0;\n    text-align: center;\n  }\n  </style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}