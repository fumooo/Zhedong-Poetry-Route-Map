{"ast":null,"code":"export default {\n  data() {\n    var validatePass = (rule, value, callback) => {\n      if (!value) {\n        callback(new Error(\"请输入新密码\"));\n      } else if (value.toString().length < 6 || value.toString().length > 18) {\n        callback(new Error(\"密码长度为6-18位\"));\n      } else {\n        callback();\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请再次输入密码\"));\n      } else if (value !== this.resetForm.newpwd) {\n        callback(new Error(\"两次输入密码不一致!\"));\n      } else {\n        callback();\n      }\n    };\n    return {};\n  },\n  methods: {\n    toAmend() {\n      console.log(resetForm);\n\n      // this.$refs.resetForm.validate(valid => {\n      //   if (valid) {\n      //   //这里的api.materialQuery.toAmend是调用前期我们统一的api接口url路径，不作参考 ，只要把后台需要的字段正常传进去即可 \n      //     api.materialQuery.toAmend(this.resetForm)\n      //       .then(res => {\n      //         if(res.code === 2){\n      //           this.$message({\n      //               message: res.msg,\n      //               type: \"error\",\n      //               duration: \"2000\"\n      //             });\n      //           return false;\n      //         }\n      //         if (res.code === 0) {\n      //           this.$message.success(\"修改成功,3秒后跳转到登录页！\");\n      //           setTimeout(() => {\n      //              this.logout();//调用跳转到登陆页的方法\n      //           }, 3000);\n      //         }\n      //         ic\n      //       })\n      //       .catch(() => {});\n      //   }\n      // });\n    }\n    //这是修改成功后重新返回登陆页的方法，看个人需要自行调整\n  }\n};","map":{"version":3,"mappings":"AA0BA;EACAA;IACA;MACA;QACAC;MACA;QACAA;MACA;QACAA;MACA;IACA;IACA;MACA;QACAA;MACA;QACAA;MACA;QACAA;MACA;IACA;IACA,QAEA;EACA;EACAC;IACAC;MACAC;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACA;EAEA;AACA","names":["data","callback","methods","toAmend","console"],"sourceRoot":"src/view/back/Login","sources":["Password.vue"],"sourcesContent":["<template>\n    <div class=\"app-container common-list-page\">\n      <el-form\n        :model=\"resetForm\"\n        :rules=\"resetFormRules\"\n        ref=\"resetForm\"\n        status-icon\n        label-width=\"100px\"\n      >\n        <el-form-item label=\"旧密码：\" prop=\"password\">\n          <el-input type=\"password\" v-model=\"resetForm.password\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"新密码：\" prop=\"newpassword\">\n          <el-input type=\"password\" v-model=\"resetForm.newpassword\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"确认密码：\" prop=\"newpassword1\">\n          <el-input type=\"password\" v-model=\"resetForm.newpassword1\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click.native.prevent=\"toAmend\">确认修改</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      var validatePass = (rule, value, callback) => {\n        if (!value) {\n          callback(new Error(\"请输入新密码\"));\n        } else if (value.toString().length < 6 || value.toString().length > 18) {\n          callback(new Error(\"密码长度为6-18位\"));\n        } else {\n          callback();\n        }\n      };\n      var validatePass2 = (rule, value, callback) => {\n        if (value === \"\") {\n          callback(new Error(\"请再次输入密码\"));\n        } else if (value !== this.resetForm.newpwd) {\n          callback(new Error(\"两次输入密码不一致!\"));\n        } else {\n          callback();\n        }\n      };\n      return {\n       \n      };\n    },\n    methods: {\n      toAmend() {\n        console.log(resetForm)\n\n        // this.$refs.resetForm.validate(valid => {\n        //   if (valid) {\n        //   //这里的api.materialQuery.toAmend是调用前期我们统一的api接口url路径，不作参考 ，只要把后台需要的字段正常传进去即可 \n        //     api.materialQuery.toAmend(this.resetForm)\n        //       .then(res => {\n        //         if(res.code === 2){\n        //           this.$message({\n        //               message: res.msg,\n        //               type: \"error\",\n        //               duration: \"2000\"\n        //             });\n        //           return false;\n        //         }\n        //         if (res.code === 0) {\n        //           this.$message.success(\"修改成功,3秒后跳转到登录页！\");\n        //           setTimeout(() => {\n        //              this.logout();//调用跳转到登陆页的方法\n        //           }, 3000);\n        //         }\n        //         ic\n        //       })\n        //       .catch(() => {});\n        //   }\n        // });\n      },\n      //这是修改成功后重新返回登陆页的方法，看个人需要自行调整\n      \n    },\n  };\n  </script>\n  \n  <style scoped>\n  .el-form {\n    width: 60%;\n    margin: 50px auto 0;\n    text-align: center;\n  }\n  </style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}